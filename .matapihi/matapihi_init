#! /bin/bash

#     matapihi the window that looks into and Xserver through SSH tunels and VNC
#     Copyright (C) 2020 Shaun Alexander

#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.

#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.

#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <https://www.gnu.org/licenses/>.

m_exit=~/.matapihi/matapihi_exit
m_init=~/.matapihi/matapihi_init
m_log=~/.matapihi/matapihi.log
m_start=~/.matapihi/matapihi_start


log () {
    if [ "$#" -ne 0 ]; then
        printf '%s\n' "$@"
    else
        cat
    fi | ts '[%Y-%m-%d %H:%M:%S]' >> "$m_log"
}


get_scripts () {
    local in_out output script_url
    in_out="$1"
    output="$2"

    log "Prompting user for $output script"
    echo "If your seeing this it's either the first time you've connected to Matapihi"
    echo "or your $output script has failed, you can try to set up a new script."
    echo "A blank entry will set the script to setup the default scripts"
    echo "The following will ovewrite any $output script"
    echo "(Enter q here to quit before changes are made)"
    read quit

    # If input is q
    if [[ "$quit" == "q" ]]
    then
        log "User exited from $output prompt without providing a script"
	      echo "Run '. $m_init' when your ready to restart"
        exit 1
    fi

    echo "Enter the url for the script to download that you want to run when $in_out Matapihi:"
    echo "(You're in xterm so [shift] + [insert] or middle mouse button to paste or"
    echo "if you prefer right click or ctrl + shift + v, just for the Mac users that"
    echo "dont have insert or a middle mouse button)"
    read script_url

    # If input is blank
    if test -z "$script_url"
    then
        echo "Writing base bash script" | tee >(log)
        printf "#! /bin/bash\n\necho in $output\n" > "$output"
        if [[ "$output" == "$m_start" ]]
        then
            printf "\necho starting bash prompt\nbash -i\n" >> "$output"
        fi
    else
	      echo "Writing custom script $script_url" | tee >(log)
        wget -O "$output" -- "$script_url" \
            && echo "Download complete" | tee >(log)
    fi

    echo "You should check the script is as you expect before you run it,"
    echo "File will now open in less, press enter to continue"
    echo "Then d to delete the file or any other key to continue"
    read

    less -X -n -i -F "$output"
    echo ""
    echo "Are you happy for this script to execute? (d to destroy it, anything else to continue)"
    read destroy
    if [[ "$destroy" == "d" ]]
    then
        log "Script rejected - removing"
        rm "$output" && echo "$output removed"
    else
        log "Set permissions to execute for $output"
        chmod +x "$output"
    fi
}


check_files () {
    if [[ ! -f "$m_start" ]]
    then
        get_scripts "an initial client connects to" "$m_start"
    fi

    if [[ ! -f "$m_exit" ]]
    then
        get_scripts "shutting eveything down before the final client disconnects from" "$m_exit"
        echo "You may like to call $m_exit to test the disconnect script,"
        echo "Note: doing so shouldn't kill the session"
    fi
}

while [[ ! -f "${m_start}" || ! -f "${m_exit}" ]]; do
    echo checking files | tee >(log)
    check_files
done
